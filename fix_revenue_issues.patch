# PATCH TO FIX REVENUE CALCULATION ISSUES
# Apply these changes to app.py

## VARIABLE MAPPING:
# base_prime_rate → non_member_rate_prime (non-member prime rate)
# non_prime_rate → non_member_rate_offpeak (non-member off-peak rate)  
# member_prime_rate → member_rate_prime (member prime rate per person)
# league_price → league_price_prime (prime-time league price)

## STEP 1: Add Member Cap Constant (after line 79)
```python
# CRITICAL: Member cap enforcement
MEMBER_CAP = 350
```

## STEP 2: Fix Member Schedule Parsing (replace lines 168-176)
```python
# Parse member schedule with cap enforcement
try:
    member_schedule = [min(int(x.strip()), MEMBER_CAP) for x in member_schedule_input.split(',')]
    if len(member_schedule) != 12:
        st.error(f"Please provide exactly 12 member counts (max {MEMBER_CAP} each)")
        member_schedule = [min(x, MEMBER_CAP) for x in [50, 70, 90, 115, 140, 170, 195, 230, 265, 300, 325, 350]]
except:
    st.error("Invalid member schedule format. Using defaults.")
    member_schedule = [min(x, MEMBER_CAP) for x in [50, 70, 90, 115, 140, 170, 195, 230, 265, 300, 325, 350]]
```

## STEP 3: Add Member Court Fee Option (after member discount calculation, around line 138)
```python
# Add checkbox for whether members pay court fees
st.markdown("**Member Court Fees**")
member_pays_court_fees = st.checkbox(
    "Members pay court fees (in addition to membership)?",
    value=True,
    help="If unchecked, membership includes unlimited court access"
)

if member_pays_court_fees:
    # Calculate member rates as discounted from non-member rates
    member_rate_prime_per_person = (base_prime_rate / 4) * (1 - member_prime_discount / 100)
    member_rate_offpeak_per_person = (non_prime_rate / 4) * (1 - member_prime_discount / 100)
else:
    # Members play free
    member_rate_prime_per_person = 0
    member_rate_offpeak_per_person = 0
```

## STEP 4: Fix Year 2 Member Growth (replace lines 761-765)
```python
else:
    # Year 2: Growth capped at MEMBER_CAP
    year1_end = min(member_schedule[11], MEMBER_CAP)
    growth_factor = 1 + (0.1 * ((i - 11) / 12))
    members = min(year1_end * growth_factor, MEMBER_CAP)
```

## STEP 5: Fix Court Revenue Calculation (replace lines 880-904)
```python
# Calculate court rental revenue with proper separation
# Prime-time open play hours (after league/corp/tournament)
prime_hours_available = max(0, available_prime_hours)  # This is AFTER league allocation
prime_member_hours = prime_hours_available * utilization * member_play_ratio
prime_nonmember_hours = prime_hours_available * utilization * (1 - member_play_ratio)

# Off-peak open play hours
offpeak_hours_available = non_prime_hours_after_events
offpeak_util = min(1.0, utilization * 0.6)
offpeak_member_hours = offpeak_hours_available * offpeak_util * member_play_ratio
offpeak_nonmember_hours = offpeak_hours_available * offpeak_util * (1 - member_play_ratio)

# Calculate revenue by segment with proper rates
if member_pays_court_fees:
    # Members pay discounted per-person rate (assume 3.5 players per court)
    court_rev_members_prime = prime_member_hours * member_rate_prime_per_person * 3.5
    court_rev_members_offpeak = offpeak_member_hours * member_rate_offpeak_per_person * 3.5
else:
    court_rev_members_prime = 0
    court_rev_members_offpeak = 0

# Non-members pay full court rate
court_rev_nm_prime = prime_nonmember_hours * base_prime_rate
court_rev_nm_offpeak = offpeak_nonmember_hours * non_prime_rate

total_court_revenue = (
    court_rev_members_prime + court_rev_members_offpeak +
    court_rev_nm_prime + court_rev_nm_offpeak
)
court_rental_revenue.append(total_court_revenue)
```

## STEP 6: Fix League Revenue to Use Prime Price (line 842)
```python
# Use prime league price since leagues get prime-time hours
current_quarter_league_rev = league_spots * league_price_prime / 3.0
```

## STEP 7: Scale Variable Costs (replace lines 944-945)
```python
# Variable costs scale with activity-based revenue
variable_revenue = (
    projections['Court Rental Revenue'] + 
    projections['League Revenue'] +
    projections['Corporate Revenue'] +
    projections['Tournament Revenue']
)
projections['Variable Costs'] = variable_revenue * (variable_cost_pct / 100)

# Add staff costs based on utilization
utilized_hours = []  # Need to track this in the main loop
for i in range(24):
    # Calculate total utilized court hours for the month
    # This would need to be tracked in the revenue calculation loop
    pass

# For now, estimate staff costs as % of variable revenue
staff_cost_pct = 5.0  # 5% for additional staffing
projections['Staff Costs'] = variable_revenue * (staff_cost_pct / 100)

projections['Total Operating Costs'] = (
    projections['Fixed Costs'] + 
    projections['Variable Costs'] + 
    projections['Staff Costs']
)
```

## STEP 8: Add Debug Panel in Sidebar (after line 90)
```python
# Debug Mode
st.divider()
show_debug = st.checkbox(
    "Show Debug Reconciliation",
    value=False,
    help="Display detailed capacity and revenue calculations"
)
```

## STEP 9: Add Sanity Checks Function (before generate_monthly_projections)
```python
def run_sanity_checks(projections_df):
    """Validate calculations with assertions"""
    
    # Check member cap
    max_members = projections_df['Members'].max()
    assert max_members <= MEMBER_CAP + 1e-6, f"Member cap exceeded: {max_members} > {MEMBER_CAP}"
    
    # Check average members doesn't exceed cap
    avg_members_y1 = projections_df.iloc[:12]['Members'].mean()
    avg_members_y2 = projections_df.iloc[12:24]['Members'].mean()
    assert avg_members_y1 <= MEMBER_CAP + 1e-6, f"Y1 avg members exceeds cap: {avg_members_y1}"
    assert avg_members_y2 <= MEMBER_CAP + 1e-6, f"Y2 avg members exceeds cap: {avg_members_y2}"
    
    # Check league share
    assert league_prime_hours_pct <= 60 + 1e-6, f"League share too high: {league_prime_hours_pct}%"
    
    # Check revenue reasonableness
    y2_court_revenue = projections_df.iloc[12:24]['Court Rental Revenue'].sum()
    assert y2_court_revenue < 1000000, f"Y2 court revenue unrealistic: ${y2_court_revenue:,.0f}"
    
    return True
```

## STEP 10: Update Year Summary Display (around line 1128)
```python
# Fix average member display to use capped values
"Avg Monthly Members": [
    f"{min(round(projections_df.iloc[:12]['Members'].mean()), MEMBER_CAP)}",
    f"{min(round(projections_df.iloc[12:24]['Members'].mean()), MEMBER_CAP)}",
]
```

## VALIDATION ASSERTIONS TO ADD:
```python
# At the end of generate_monthly_projections(), add:
assert all(m <= MEMBER_CAP for m in member_counts), "Member cap violated"
assert league_prime_hours_pct == 60, "League allocation should be 60%"
assert non_member_rate_prime == 120.0, "Non-member prime rate should be $120"
assert non_member_rate_offpeak == 100.0, "Non-member off-peak rate should be $100"
```